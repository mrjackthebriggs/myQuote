<%= form_with(model: quote) do |form| %>
  <% if @quote.errors.any? %> 
    <div class="alert alert-danger"> 
      <ul> 
        <% @quote.errors.full_messages.each do |msg| %> 
          <li><%= msg %></li>
        <% end %> 
      </ul>
    </div>
  <% end %>

  <%= form_with(model: @quote, url: quotes_path, method: :post, local: true) do |f| %>
    <%= f.hidden_field :user_id, value: current_user.id %>
    <div class="form-group" style="padding-bottom: 10px;"> 
    <%= f.text_area :quote_text, placeholder: 'Input quote', class: 'form-control' %>
    </div>
    <div class="form-group" style="padding-bottom: 10px;"> 
    <%= f.text_area :user_com, placeholder: 'Comments about the Quote', class: 'form-control' %>
    </div>
    <div class="form-check" style="padding-bottom: 10px;"> 
    <%= f.hidden_field :pub_date, value: Date.today %>
    </div>
    <div class="form-check" style="padding-bottom: 10px;"> 
      <%= f.label :public do %> 
        Public 
        <%= f.check_box :public, class: "form-check-input" %> 
      <% end %>
    </div>   
    
    <div class="form-group" style="padding-bottom: 10px;">
      <%= f.label :author_id, "Author", class: "form-label d-inline-block me-2" %>
      
      <!-- Generated by ChatGPT to get the names working properly -->
      <%= f.collection_select :author_id, Author.all, :id, lambda { |author| "#{author.auth_f_name} #{author.auth_l_name}" }, { include_blank: true }, { class: "form-control d-inline-block" } %>
    </div>


    <div id="categories-container">
    <% @quote.quote_categories.each do |quote_category| %>
      <%= f.fields_for :quote_categories, quote_category do |ri| %>
        <div class="category-field row mb-2">
          <div class="col-auto">
            <%= ri.label :category_id, "Category", class: "form-label d-inline-block me-2" %>
            <%= ri.select :category_id, Category.all.collect { |cat| [cat.cat_name, cat.id] }, { include_blank: true }, class: "form-control d-inline-block" %>
          </div>

          <div class="col-auto align-self-end">
            <%= link_to '[-] Remove this category', '#', class: 'remove-category', style: "color: red; text-decoration: none;" %> <!-- Allow users to remove a field -->
          </div>
        </div>
      <% end %>
    <% end %>
  </div>

  <!--Adds quote categories, couldn't help myself-->
  <div class="col-auto align-self-end mb-5">
    <%= link_to '[+] Add a Category', '#', class: 'add-category', style: "color: green; text-decoration: none; " %>
  </div>

  <%= f.submit 'Create Quote', class: 'btn btn-primary btn-lg' %> </div>
  <% end %>
<% end %>


<script>  
document.addEventListener('DOMContentLoaded', function() {
  document.addEventListener('click', function(e) {
    if (e.target && e.target.classList.contains('remove-category')) {
      e.preventDefault();
      const categoryFields = document.querySelectorAll('.category-field');
      if (categoryFields.length > 1) {
        e.target.closest('.category-field').remove();
      }
    //Written by ChatGPT (I don't know how to write JS very well)
    } else if (e.target && e.target.classList.contains('add-category')) { 
      e.preventDefault();
      const container = document.getElementById('categories-container');
      const categoryField = document.querySelector('.category-field'); // Get a template category field
      const newCategoryField = categoryField.cloneNode(true); // Clone the template

      // Clear any input values in the cloned category field if needed
      const inputFields = newCategoryField.querySelectorAll('input, select');
      inputFields.forEach(input => input.value = '');

      // Append the new category field to the container
      container.appendChild(newCategoryField);
    }
  });
});
</script>
